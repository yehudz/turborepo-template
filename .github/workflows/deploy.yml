name: Deploy Application

on:
  workflow_dispatch: # Manual deployment only
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - prod
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm'
        required: true
        type: string

# Prevent concurrent deployments per environment
concurrency:
  group: deploy-${{ inputs.environment }}
  cancel-in-progress: false

jobs:
  validate-deployment:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ inputs.confirm_deployment }}" != "DEPLOY" ]; then
            echo "❌ Deployment cancelled: confirmation must be exactly 'DEPLOY'"
            echo "You entered: '${{ inputs.confirm_deployment }}'"
            exit 1
          fi
          echo "✅ Deployment confirmation validated"
          
      - name: Show deployment info
        run: |
          echo "🚀 Deploying to: ${{ inputs.environment }}"
          echo "📦 Commit: ${{ github.sha }}"
          echo "👤 Triggered by: ${{ github.actor }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

  build-and-deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate-deployment
    environment: ${{ inputs.environment }}

    # Required permissions for workload identity
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Build web app
        run: pnpm --filter web build

      # Authenticate to Google Cloud using Workload Identity
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.WIF_SERVICE_ACCOUNT }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ vars.REGION }}-docker.pkg.dev

      - name: Create Dockerfile for web app
        run: |
          cat > apps/web/Dockerfile << 'EOF'
          FROM node:18-alpine AS base
          
          # Install dependencies only when needed
          FROM base AS deps
          RUN apk add --no-cache libc6-compat
          WORKDIR /app
          
          # Install pnpm
          RUN npm install -g pnpm
          
          # Copy package files
          COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
          COPY packages/ packages/
          COPY apps/web/package.json apps/web/
          
          # Install dependencies
          RUN pnpm install --frozen-lockfile --prod
          
          # Rebuild the source code only when needed
          FROM base AS builder
          WORKDIR /app
          RUN npm install -g pnpm
          
          COPY --from=deps /app/node_modules ./node_modules
          COPY . .
          
          # Build packages first
          RUN pnpm build
          
          # Build the web app
          RUN pnpm --filter web build
          
          # Production image
          FROM base AS runner
          WORKDIR /app
          
          ENV NODE_ENV production
          
          RUN addgroup --system --gid 1001 nodejs
          RUN adduser --system --uid 1001 nextjs
          
          # Copy built application
          COPY --from=builder /app/apps/web/public ./public
          COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/standalone ./
          COPY --from=builder --chown=nextjs:nodejs /app/apps/web/.next/static ./apps/web/.next/static
          
          USER nextjs
          
          EXPOSE 3000
          
          ENV PORT 3000
          ENV HOSTNAME "0.0.0.0"
          
          CMD ["node", "apps/web/server.js"]
          EOF

      - name: Build and push Docker image
        run: |
          IMAGE_URL="${{ vars.REGION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.ARTIFACT_REGISTRY_REPO }}/web:${{ github.sha }}"
          
          docker build -t $IMAGE_URL -f apps/web/Dockerfile .
          docker push $IMAGE_URL
          
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV

      - name: Set environment-specific config
        run: |
          # Set resource limits based on environment
          if [ "${{ inputs.environment }}" = "prod" ]; then
            echo "MIN_INSTANCES=1" >> $GITHUB_ENV
            echo "MAX_INSTANCES=100" >> $GITHUB_ENV
            echo "MEMORY=2Gi" >> $GITHUB_ENV
            echo "CPU=2" >> $GITHUB_ENV
            echo "SERVICE_NAME=web-app" >> $GITHUB_ENV
          else
            echo "MIN_INSTANCES=0" >> $GITHUB_ENV
            echo "MAX_INSTANCES=10" >> $GITHUB_ENV
            echo "MEMORY=512Mi" >> $GITHUB_ENV
            echo "CPU=1" >> $GITHUB_ENV
            echo "SERVICE_NAME=web-app-dev" >> $GITHUB_ENV
          fi
          
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_URL }} \
            --region ${{ vars.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --memory ${{ env.MEMORY }} \
            --cpu ${{ env.CPU }} \
            --min-instances ${{ env.MIN_INSTANCES }} \
            --max-instances ${{ env.MAX_INSTANCES }} \
            --set-env-vars NODE_ENV=${{ inputs.environment }} \
            --set-env-vars ENVIRONMENT=${{ inputs.environment }} \
            --set-secrets DATABASE_URL=DATABASE_URL:latest \
            --set-secrets NEXT_PUBLIC_APPWRITE_PROJECT_ID=NEXT_PUBLIC_APPWRITE_PROJECT_ID:latest \
            --set-secrets NEXT_PUBLIC_APPWRITE_URL=NEXT_PUBLIC_APPWRITE_URL:latest \
            --set-secrets GOOGLE_CLOUD_BUCKET_NAME=GOOGLE_CLOUD_BUCKET_NAME:latest

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ vars.REGION }} --format 'value(status.url)')
          echo "🚀 Successfully deployed to ${{ inputs.environment }}"
          echo "📍 Service URL: $SERVICE_URL"
          echo "🏷️  Service Name: ${{ env.SERVICE_NAME }}"
          echo "💾 Image: ${{ env.IMAGE_URL }}"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT